commit 5255ff7a6051f56689e0db2a0fa7e9a6e4086d66
Author: Anton A. Melnikov <a.melnikov@postgrespro.ru>
Date:   Mon Nov 8 11:11:45 2021 +0300

    [PGPRO-5771] Add handler for COMP_CRC32C and restore pg_comp_crc32c pointer definition.

diff --git a/src/backend/replication/basebackup.c b/src/backend/replication/basebackup.c
index 3e53b3df6f..f76bfc2a64 100644
--- a/src/backend/replication/basebackup.c
+++ b/src/backend/replication/basebackup.c
@@ -209,6 +209,13 @@ static const struct exclude_list_item excludeFiles[] =
 	{"postmaster.pid", false},
 	{"postmaster.opts", false},

+	/*
+	 * Skip all transient ptrack files, but do copy ptrack.map, since it may
+	 * be successfully used immediately after backup. TODO: check, test?
+	 */
+	{"ptrack.map.mmap", false},
+	{"ptrack.map.tmp", false},
+
 	/* end of list */
 	{NULL, false}
 };
@@ -224,6 +231,10 @@ static const struct exclude_list_item noChecksumFiles[] = {
 	{"pg_filenode.map", false},
 	{"pg_internal.init", true},
 	{"PG_VERSION", false},
+	{"ptrack.map.mmap", false},
+	{"ptrack.map", false},
+	{"ptrack.map.tmp", false},
+
 #ifdef EXEC_BACKEND
 	{"config_exec_params", true},
 #endif
diff --git a/src/backend/storage/file/copydir.c b/src/backend/storage/file/copydir.c
index 4a0d23b11e..d59009a4c8 100644
--- a/src/backend/storage/file/copydir.c
+++ b/src/backend/storage/file/copydir.c
@@ -27,6 +27,8 @@
 #include "miscadmin.h"
 #include "pgstat.h"

+copydir_hook_type copydir_hook = NULL;
+
 /*
  * copydir: copy a directory
  *
@@ -78,6 +80,9 @@ copydir(char *fromdir, char *todir, bool recurse)
 	}
 	FreeDir(xldir);

+	if (copydir_hook)
+		copydir_hook(todir);
+
 	/*
 	 * Be paranoid here and fsync all files to ensure the copy is really done.
 	 * But if fsync is disabled, we're done.
diff --git a/src/backend/storage/smgr/md.c b/src/backend/storage/smgr/md.c
index fa29e7041f..8bda639eda 100644
--- a/src/backend/storage/smgr/md.c
+++ b/src/backend/storage/smgr/md.c
@@ -39,6 +39,7 @@
 #include "utils/memutils.h"
 #include "pg_trace.h"

+ProcessSyncRequests_hook_type ProcessSyncRequests_hook = NULL;

 /* intervals for calling AbsorbFsyncRequests in mdsync and mdpostckpt */
 #define FSYNCS_PER_ABSORB		10
@@ -114,6 +115,8 @@ typedef struct _MdfdVec

 static MemoryContext MdCxt;		/* context for all MdfdVec objects */

+mdextend_hook_type mdextend_hook = NULL;
+mdwrite_hook_type mdwrite_hook = NULL;

 /*
  * In some contexts (currently, standalone backends and the checkpointer)
@@ -600,6 +603,9 @@ mdextend(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
 		register_dirty_segment(reln, forknum, v);

 	Assert(_mdnblocks(reln, forknum, v) <= ((BlockNumber) RELSEG_SIZE));
+
+	if (mdextend_hook)
+		mdextend_hook(reln->smgr_rnode, forknum, blocknum);
 }

 /*
@@ -893,6 +899,9 @@ mdwrite(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,

 	if (!skipFsync && !SmgrIsTemp(reln))
 		register_dirty_segment(reln, forknum, v);
+
+	if (mdwrite_hook)
+		mdwrite_hook(reln->smgr_rnode, forknum, blocknum);
 }

 /*
@@ -1371,6 +1380,9 @@ mdsync(void)
 	CheckpointStats.ckpt_longest_sync = longest;
 	CheckpointStats.ckpt_agg_sync_time = total_elapsed;

+	if (ProcessSyncRequests_hook)
+		ProcessSyncRequests_hook();
+
 	/* Flag successful completion of mdsync */
 	mdsync_in_progress = false;
 }
diff --git a/src/bin/pg_resetwal/pg_resetwal.c b/src/bin/pg_resetwal/pg_resetwal.c
index 611edf6ade..ec1c1212bd 100644
--- a/src/bin/pg_resetwal/pg_resetwal.c
+++ b/src/bin/pg_resetwal/pg_resetwal.c
@@ -85,6 +85,7 @@ static void RewriteControlFile(void);
 static void FindEndOfXLOG(void);
 static void KillExistingXLOG(void);
 static void KillExistingArchiveStatus(void);
+static void KillExistingPtrack(void);
 static void WriteEmptyXLOG(void);
 static void usage(void);

@@ -525,6 +526,7 @@ main(int argc, char *argv[])
 	RewriteControlFile();
 	KillExistingXLOG();
 	KillExistingArchiveStatus();
+	KillExistingPtrack();
 	WriteEmptyXLOG();

 	printf(_("Write-ahead log reset\n"));
@@ -1210,6 +1212,57 @@ KillExistingArchiveStatus(void)
 	}
 }

+/*
+ * Remove existing ptrack files
+ */
+static void
+KillExistingPtrack(void)
+{
+#define PTRACKDIR "global"
+
+	DIR			   *xldir;
+	struct dirent  *xlde;
+	char			path[MAXPGPATH + sizeof(PTRACKDIR)];
+
+	xldir = opendir(PTRACKDIR);
+	if (xldir == NULL)
+	{
+		fprintf(stderr, _("%s: could not open directory \"%s\": %s\n"),
+				progname, PTRACKDIR, strerror(errno));
+		exit(1);
+	}
+
+	while (errno = 0, (xlde = readdir(xldir)) != NULL)
+	{
+		if (strcmp(xlde->d_name, "ptrack.map.mmap") == 0 ||
+			strcmp(xlde->d_name, "ptrack.map") == 0 ||
+			strcmp(xlde->d_name, "ptrack.map.tmp") == 0)
+		{
+			snprintf(path, sizeof(path), "%s/%s", PTRACKDIR, xlde->d_name);
+			if (unlink(path) < 0)
+			{
+				fprintf(stderr, _("%s: could not delete file \"%s\": %s\n"),
+						progname, path, strerror(errno));
+				exit(1);
+			}
+		}
+	}
+
+	if (errno)
+	{
+		fprintf(stderr, _("%s: could not read directory \"%s\": %s\n"),
+				progname, PTRACKDIR, strerror(errno));
+		exit(1);
+	}
+
+	if (closedir(xldir))
+	{
+		fprintf(stderr, _("%s: could not close directory \"%s\": %s\n"),
+				progname, PTRACKDIR, strerror(errno));
+		exit(1);
+	}
+}
+

 /*
  * Write an empty XLOG file, containing only the checkpoint record
diff --git a/src/bin/pg_rewind/filemap.c b/src/bin/pg_rewind/filemap.c
index 8ea7fafa27..997168fcac 100644
--- a/src/bin/pg_rewind/filemap.c
+++ b/src/bin/pg_rewind/filemap.c
@@ -118,6 +118,10 @@ static const struct exclude_list_item excludeFiles[] =
 	{"postmaster.pid", false},
 	{"postmaster.opts", false},

+	{"ptrack.map.mmap", false},
+	{"ptrack.map", false},
+	{"ptrack.map.tmp", false},
+
 	/* end of list */
 	{NULL, false}
 };
diff --git a/src/include/miscadmin.h b/src/include/miscadmin.h
index 7c9f319b67..1e29827030 100644
--- a/src/include/miscadmin.h
+++ b/src/include/miscadmin.h
@@ -379,7 +379,7 @@ typedef enum ProcessingMode
 	NormalProcessing			/* normal processing */
 } ProcessingMode;

-extern ProcessingMode Mode;
+extern PGDLLIMPORT ProcessingMode Mode;

 #define IsBootstrapProcessingMode() (Mode == BootstrapProcessing)
 #define IsInitProcessingMode()		(Mode == InitProcessing)
diff --git a/src/include/storage/checksum.h b/src/include/storage/checksum.h
index 433755e279..de06d3b0cf 100644
--- a/src/include/storage/checksum.h
+++ b/src/include/storage/checksum.h
@@ -14,6 +14,7 @@
 #define CHECKSUM_H

 #include "storage/block.h"
+#include "port/pg_crc32c.h"

 /*
  * Compute the checksum for a Postgres page.  The page must be aligned on a
@@ -21,4 +22,11 @@
  */
 extern uint16 pg_checksum_page(char *page, BlockNumber blkno);

+/*
+* Wrapper function for COMP_CRC32C macro. Was added to avoid
+* FRONTEND macro use for pg_comp_crc32c pointer in windows build.
+*/
+extern pg_crc32c
+comp_crc32c(pg_crc32c *crc, const void *data, size_t len);
+
 #endif							/* CHECKSUM_H */
diff --git a/src/include/storage/checksum_impl.h b/src/include/storage/checksum_impl.h
index a49d27febb..459c938018 100644
--- a/src/include/storage/checksum_impl.h
+++ b/src/include/storage/checksum_impl.h
@@ -213,3 +213,9 @@ pg_checksum_page(char *page, BlockNumber blkno)
 	 */
 	return (checksum % 65535) + 1;
 }
+
+pg_crc32c comp_crc32c(pg_crc32c *crc, const void *data, size_t len)
+{
+	COMP_CRC32C(*crc, data, len);
+	return *crc;
+}
diff --git a/src/include/storage/copydir.h b/src/include/storage/copydir.h
index 4fef3e2107..e55430879c 100644
--- a/src/include/storage/copydir.h
+++ b/src/include/storage/copydir.h
@@ -13,6 +13,9 @@
 #ifndef COPYDIR_H
 #define COPYDIR_H

+typedef void (*copydir_hook_type) (const char *path);
+extern PGDLLIMPORT copydir_hook_type copydir_hook;
+
 extern void copydir(char *fromdir, char *todir, bool recurse);
 extern void copy_file(char *fromfile, char *tofile);

diff --git a/src/include/storage/smgr.h b/src/include/storage/smgr.h
index 0298ed1a2b..24c684771d 100644
--- a/src/include/storage/smgr.h
+++ b/src/include/storage/smgr.h
@@ -116,6 +116,17 @@ extern void AtEOXact_SMgr(void);
 /* internals: move me elsewhere -- ay 7/94 */

 /* in md.c */
+
+typedef void (*mdextend_hook_type) (RelFileNodeBackend smgr_rnode,
+									ForkNumber forknum, BlockNumber blocknum);
+extern PGDLLIMPORT mdextend_hook_type mdextend_hook;
+typedef void (*mdwrite_hook_type) (RelFileNodeBackend smgr_rnode,
+								   ForkNumber forknum, BlockNumber blocknum);
+extern PGDLLIMPORT mdwrite_hook_type mdwrite_hook;
+
+typedef void (*ProcessSyncRequests_hook_type) (void);
+extern PGDLLIMPORT ProcessSyncRequests_hook_type ProcessSyncRequests_hook;
+
 extern void mdinit(void);
 extern void mdclose(SMgrRelation reln, ForkNumber forknum);
 extern void mdcreate(SMgrRelation reln, ForkNumber forknum, bool isRedo);
